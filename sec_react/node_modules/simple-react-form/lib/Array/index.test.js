'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _Form = require('../Form');

var _Form2 = _interopRequireDefault(_Form);

var _Field = require('../Field');

var _Field2 = _interopRequireDefault(_Field);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

require('../setupTest');

var _Object = require('../Object');

var _Object2 = _interopRequireDefault(_Object);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DummyInput = function (_React$Component) {
  (0, _inherits3.default)(DummyInput, _React$Component);

  function DummyInput() {
    (0, _classCallCheck3.default)(this, DummyInput);
    return (0, _possibleConstructorReturn3.default)(this, (DummyInput.__proto__ || Object.getPrototypeOf(DummyInput)).apply(this, arguments));
  }

  (0, _createClass3.default)(DummyInput, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement('input', {
        value: this.props.value || '',
        onChange: function onChange(event) {
          _this2.props.onChange(event.target.value);
        }
      });
    }
  }]);
  return DummyInput;
}(_react2.default.Component);

DummyInput.propTypes = {
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func
};


it('should render correctly', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    null,
    _react2.default.createElement(_Field2.default, { fieldName: 'array', type: _index2.default })
  ));

  _testUtils2.default.findRenderedComponentWithType(tree, _index2.default);
});

it('addItem should add an item', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    { addSubmitButton: false },
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'array', type: _index2.default },
      _react2.default.createElement('div', { className: 'children' })
    )
  ));

  expect.assertions(1);
  try {
    _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'children');
  } catch (error) {
    expect(error.message).toContain('Did not find exactly one match (found: 0) for class:children');
  }

  var button = _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'button');
  _testUtils2.default.Simulate.click(button);

  _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'children');
});

it('removeItem should remove the item', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    null,
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'array', type: _index2.default },
      _react2.default.createElement('div', { className: 'children' })
    )
  ));
  // add the first component
  var addButton = _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'srf_addButton');
  _testUtils2.default.Simulate.click(addButton);
  _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'children');

  // press the remove button
  var removeButton = _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'srf_removeButton');
  _testUtils2.default.Simulate.click(removeButton);
  expect.assertions(1);
  try {
    _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'children');
  } catch (error) {
    expect(error.message).toContain('Did not find exactly one match (found: 0) for class:children');
  }
});

it('should render an error if there is one', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    null,
    _react2.default.createElement(_Field2.default, { fieldName: 'array', type: _index2.default, errorMessage: 'I AM AN ERROR' })
  ));

  _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'srf_errorMessage');
});

it('should pass the value to the child fields', function () {
  var item = { name: 'hello', text: 'bye' };
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    { state: { items: [item] } },
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'items', type: _index2.default },
      _react2.default.createElement(_Field2.default, { fieldName: 'name', type: DummyInput }),
      _react2.default.createElement(_Field2.default, { fieldName: 'text', type: DummyInput })
    )
  ));
  var objectInput = _testUtils2.default.findRenderedComponentWithType(tree, _index2.default);
  expect(objectInput.props.value).toEqual([item]);
  var inputs = _testUtils2.default.scryRenderedComponentsWithType(tree, DummyInput);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var input = _step.value;

      var expectedValue = item[input.props.fieldName.replace('items.0.', '')];
      expect(input.props.value).toBe(expectedValue);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  expect.assertions(inputs.length + 1);
});

test('onChange should make changes correctly', function () {
  var state = { persons: [{ name: 'Nicolás' }] };

  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    { state: state, onChange: function onChange(changes) {
        return state = changes;
      } },
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'persons', type: _index2.default },
      _react2.default.createElement(_Field2.default, { fieldName: 'name', type: DummyInput })
    )
  ));

  var input = _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'input');
  _testUtils2.default.Simulate.change(input, { target: { value: 'Joaquín' } });
  expect(state).toEqual({ persons: [{ name: 'Joaquín' }] });
});

test('onChange should make changes correctly on double array', function () {
  var state = {
    person: {
      friends: [{ name: 'Nicolás' }]
    }
  };

  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    { state: state, onChange: function onChange(changes) {
        return state = changes;
      } },
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'person', type: _Object2.default },
      _react2.default.createElement(
        _Field2.default,
        { fieldName: 'friends', type: _index2.default },
        _react2.default.createElement(_Field2.default, { fieldName: 'name', type: DummyInput })
      )
    )
  ));

  var input = _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'input');
  _testUtils2.default.Simulate.change(input, { target: { value: 'Joaquín' } });
  expect(state).toEqual({
    person: {
      friends: [{ name: 'Joaquín' }]
    }
  });
});