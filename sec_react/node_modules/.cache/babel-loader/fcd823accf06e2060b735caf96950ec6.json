{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [],\n  fake: 10\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FAKE\":\n      return { ...state,\n        fake: state.fake + 1\n      };\n\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    usersAPI.getUsers(page, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(response => {\n      if (response.data.resultCode == 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(response => {\n      if (response.data.resultCode == 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["C:/Users/tvirg/OneDrive/Рабочий стол/react-way-of-samurai-c15355c9b9752fa07cc4cd950505c393fb3acf47/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","fake","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","getUsers","then","data","items","totalCount","follow","response","resultCode","unfollow"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,4BAA4B,GAAG,8BAArC;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,QAAQ,EAAE,CAFK;AAGfC,EAAAA,eAAe,EAAE,CAHF;AAIfC,EAAAA,WAAW,EAAE,CAJE;AAKfC,EAAAA,UAAU,EAAE,IALG;AAMfC,EAAAA,mBAAmB,EAAE,EANN;AAOfC,EAAAA,IAAI,EAAE;AAPS,CAAnB;;AAUA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,MAAL;AAAa,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,GAAa;AAA9B,OAAP;;AACb,SAAKd,MAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHR,QAAAA,KAAK,EAAEQ,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAiBC,CAAC,IAAK;AAC1B,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKnB,QAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHR,QAAAA,KAAK,EAAEQ,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAiBC,CAAC,IAAK;AAC1B,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKlB,SAAL;AAAgB;AACZ,eAAO,EAAE,GAAGc,KAAL;AAAYR,UAAAA,KAAK,EAAES,MAAM,CAACT;AAA1B,SAAP;AACH;;AACD,SAAKL,gBAAL;AAAuB;AACnB,eAAO,EAAE,GAAGa,KAAL;AAAYL,UAAAA,WAAW,EAAEM,MAAM,CAACN;AAAhC,SAAP;AACH;;AACD,SAAKP,qBAAL;AAA4B;AACxB,eAAO,EAAE,GAAGY,KAAL;AAAYN,UAAAA,eAAe,EAAEO,MAAM,CAACO;AAApC,SAAP;AACH;;AACD,SAAKnB,kBAAL;AAAyB;AACrB,eAAO,EAAE,GAAGW,KAAL;AAAYJ,UAAAA,UAAU,EAAEK,MAAM,CAACL;AAA/B,SAAP;AACH;;AACD,SAAKN,4BAAL;AAAmC;AAC/B,eAAO,EACH,GAAGU,KADA;AAEHH,UAAAA,mBAAmB,EAAEI,MAAM,CAACL,UAAP,GACf,CAAC,GAAGI,KAAK,CAACH,mBAAV,EAA+BI,MAAM,CAACK,MAAtC,CADe,GAEfN,KAAK,CAACH,mBAAN,CAA0BY,MAA1B,CAAiCJ,EAAE,IAAIA,EAAE,IAAIJ,MAAM,CAACK,MAApD;AAJH,SAAP;AAMH;;AACD;AACI,aAAON,KAAP;AA3CR;AA6CH,CA9CD;;AAiDA,OAAO,MAAMU,aAAa,GAAIJ,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAElB,MAAP;AAAesB,EAAAA;AAAf,CAAb,CAAtB;AACP,OAAO,MAAMK,eAAe,GAAIL,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEjB,QAAP;AAAiBqB,EAAAA;AAAjB,CAAb,CAAxB;AACP,OAAO,MAAMM,QAAQ,GAAIpB,KAAD,KAAY;AAACU,EAAAA,IAAI,EAAEhB,SAAP;AAAkBM,EAAAA;AAAlB,CAAZ,CAAjB;AACP,OAAO,MAAMqB,cAAc,GAAIlB,WAAD,KAAkB;AAACO,EAAAA,IAAI,EAAEf,gBAAP;AAAyBQ,EAAAA;AAAzB,CAAlB,CAAvB;AACP,OAAO,MAAMmB,kBAAkB,GAAIpB,eAAD,KAAsB;AAACQ,EAAAA,IAAI,EAAEd,qBAAP;AAA8BoB,EAAAA,KAAK,EAAEd;AAArC,CAAtB,CAA3B;AACP,OAAO,MAAMqB,gBAAgB,GAAInB,UAAD,KAAiB;AAACM,EAAAA,IAAI,EAAEb,kBAAP;AAA2BO,EAAAA;AAA3B,CAAjB,CAAzB;AACP,OAAO,MAAMoB,uBAAuB,GAAG,CAACpB,UAAD,EAAaU,MAAb,MAAyB;AAACJ,EAAAA,IAAI,EAAEZ,4BAAP;AAAqCM,EAAAA,UAArC;AAAiDU,EAAAA;AAAjD,CAAzB,CAAhC;AAEP,OAAO,MAAMW,YAAY,GAAG,CAACC,IAAD,EAAOzB,QAAP,KAAoB;AAC5C,SAAQ0B,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACJ,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACAI,IAAAA,QAAQ,CAACN,cAAc,CAACK,IAAD,CAAf,CAAR;AAEAnC,IAAAA,QAAQ,CAACqC,QAAT,CAAkBF,IAAlB,EAAwBzB,QAAxB,EAAkC4B,IAAlC,CAAuCC,IAAI,IAAI;AAC3CH,MAAAA,QAAQ,CAACJ,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACAI,MAAAA,QAAQ,CAACP,QAAQ,CAACU,IAAI,CAACC,KAAN,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAACL,kBAAkB,CAACQ,IAAI,CAACE,UAAN,CAAnB,CAAR;AACH,KAJD;AAKH,GATD;AAUH,CAXM;AAYP,OAAO,MAAMC,MAAM,GAAInB,MAAD,IAAY;AAC9B,SAAQa,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACH,uBAAuB,CAAC,IAAD,EAAOV,MAAP,CAAxB,CAAR;AACAvB,IAAAA,QAAQ,CAAC0C,MAAT,CAAgBnB,MAAhB,EACKe,IADL,CACUK,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACJ,IAAT,CAAcK,UAAd,IAA4B,CAAhC,EAAmC;AAC/BR,QAAAA,QAAQ,CAACT,aAAa,CAACJ,MAAD,CAAd,CAAR;AACH;;AACDa,MAAAA,QAAQ,CAACH,uBAAuB,CAAC,KAAD,EAAQV,MAAR,CAAxB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAYP,OAAO,MAAMsB,QAAQ,GAAItB,MAAD,IAAY;AAChC,SAAQa,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACH,uBAAuB,CAAC,IAAD,EAAOV,MAAP,CAAxB,CAAR;AACAvB,IAAAA,QAAQ,CAAC6C,QAAT,CAAkBtB,MAAlB,EACKe,IADL,CACUK,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACJ,IAAT,CAAcK,UAAd,IAA4B,CAAhC,EAAmC;AAC/BR,QAAAA,QAAQ,CAACR,eAAe,CAACL,MAAD,CAAhB,CAAR;AACH;;AACDa,MAAAA,QAAQ,CAACH,uBAAuB,CAAC,KAAD,EAAQV,MAAR,CAAxB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;AAaP,eAAeP,YAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users: [ ],\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [],\n    fake: 10\n};\n\nconst usersReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"FAKE\": return {...state, fake: state.fake + 1}\n        case FOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u =>  {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: state.users.map( u =>  {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        case SET_USERS: {\n            return { ...state, users: action.users }\n        }\n        case SET_CURRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage}\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUsersCount: action.count}\n        }\n        case TOGGLE_IS_FETCHING: {\n            return { ...state, isFetching: action.isFetching}\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\nexport const followSuccess = (userId) => ({type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage })\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching })\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\nexport const requestUsers = (page, pageSize) => {\n    return (dispatch) => {\n        dispatch(toggleIsFetching(true));\n        dispatch(setCurrentPage(page));\n\n        usersAPI.getUsers(page, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n        });\n    }\n}\nexport const follow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.follow(userId)\n            .then(response => {\n                if (response.data.resultCode == 0) {\n                    dispatch(followSuccess(userId));\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}\nexport const unfollow = (userId) => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.unfollow(userId)\n            .then(response => {\n                if (response.data.resultCode == 0) {\n                    dispatch(unfollowSuccess(userId));\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}