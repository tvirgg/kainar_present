{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  return authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"login\", {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/tvirg/OneDrive/Рабочий стол/react-way-of-samurai-c15355c9b9752fa07cc4cd950505c393fb3acf47/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,OAAO,EACvF;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAD0D,CAAnC,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/C,SAAOf,OAAO,CAACgB,EAAR,GACFC,IADE,CACGC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAKf,QAAAA,KAAL;AAAYD,QAAAA;AAAZ,UAAqBa,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACQ,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GANE,CAAP;AAOH,CARM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCR,QAAD,IAAc;AAEhEf,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EACKN,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIU,OAAO,GAAGN,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAV,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC0B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AAEH;AACJ,GATL;AAUH,CAZM;AAcP,OAAO,MAAMI,MAAM,GAAG,MAAOb,QAAD,IAAc;AACtCf,EAAAA,OAAO,CAAC4B,MAAR,GACKX,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}  });\n\nexport const getAuthUserData = () => (dispatch) => {\n    return authAPI.me()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data;\n                dispatch(setAuthUserData(id, email, login, true));\n            }\n        });\n}\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n\n    authAPI.login(email, password, rememberMe)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(getAuthUserData())\n            } else {\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                dispatch(stopSubmit(\"login\", {_error: message}));\n\n            }\n        });\n}\n\nexport const logout = () => (dispatch) => {\n    authAPI.logout()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n        });\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}