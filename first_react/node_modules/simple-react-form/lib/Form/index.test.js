'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _Field = require('../Field');

var _Field2 = _interopRequireDefault(_Field);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

require('../setupTest');

var _Object = require('../Object');

var _Object2 = _interopRequireDefault(_Object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DummyInput = function (_React$Component) {
  (0, _inherits3.default)(DummyInput, _React$Component);

  function DummyInput() {
    (0, _classCallCheck3.default)(this, DummyInput);
    return (0, _possibleConstructorReturn3.default)(this, (DummyInput.__proto__ || Object.getPrototypeOf(DummyInput)).apply(this, arguments));
  }

  (0, _createClass3.default)(DummyInput, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'errorMessage' },
          this.props.errorMessage
        ),
        _react2.default.createElement('input', {
          value: this.props.value || '',
          onChange: function onChange(event) {
            _this2.props.onChange(event.target.value);
          }
        })
      );
    }
  }]);
  return DummyInput;
}(_react2.default.Component);

DummyInput.propTypes = {
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  errorMessage: _propTypes2.default.string
};


test('Should render by default a <form>', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _index2.default,
    null,
    _react2.default.createElement(
      'div',
      null,
      'dummy'
    )
  ));
  _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'form');
});

test('Should not render a <form> if useFormTag is false', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _index2.default,
    { useFormTag: false },
    _react2.default.createElement(
      'div',
      null,
      'dummy'
    )
  ));
  expect.assertions(1);
  try {
    _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'form');
  } catch (error) {
    expect(error.message).toContain('Did not find exactly one match (found: 0) for tag:form');
  }
});

test('onChange should dispatch on changes', function () {
  var mockFn = jest.fn();

  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _index2.default,
    { onChange: mockFn },
    _react2.default.createElement(_Field2.default, { fieldName: 'foo', type: DummyInput })
  ));

  var input = _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'input');
  _testUtils2.default.Simulate.change(input, { target: { value: 'foobar' } });
  expect(mockFn.mock.calls[0][0]).toEqual({ foo: 'foobar' });

  _testUtils2.default.Simulate.change(input, { target: { value: 'barfoo' } });
  expect(mockFn.mock.calls[1][0]).toEqual({ foo: 'barfoo' });

  _testUtils2.default.findRenderedComponentWithType(tree, _index2.default).onChange('bar', 'test');
  expect(mockFn.mock.calls[2][0]).toEqual({ bar: 'test', foo: 'barfoo' });
});

it('should render the form correctly', function () {
  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _index2.default,
    null,
    _react2.default.createElement(_Field2.default, { fieldName: 'foo', type: DummyInput })
  ));

  _testUtils2.default.findRenderedDOMComponentWithTag(tree, 'form');

  _testUtils2.default.findRenderedComponentWithType(tree, _Field2.default);

  _testUtils2.default.findRenderedComponentWithType(tree, DummyInput);
});

test('passes the errorMessage correctly', function () {
  var errorMessages = {
    'person.name': 'Error'
  };

  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _index2.default,
    { errorMessages: errorMessages },
    _react2.default.createElement(
      _Field2.default,
      { fieldName: 'person', type: _Object2.default },
      _react2.default.createElement(_Field2.default, { fieldName: 'name', type: DummyInput })
    )
  ));

  var content = _testUtils2.default.findRenderedDOMComponentWithClass(tree, 'errorMessage');
  expect(content.innerHTML).toBe(errorMessages['person.name']);
});