'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _getNewValue = require('./getNewValue');

var _getNewValue2 = _interopRequireDefault(_getNewValue);

var _isReactNative = require('../utility/isReactNative');

var _isReactNative2 = _interopRequireDefault(_isReactNative);

var _Contexts = require('../Contexts');

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Form = function (_React$Component) {
  (0, _inherits3.default)(Form, _React$Component);

  function Form(props) {
    (0, _classCallCheck3.default)(this, Form);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

    _this.getValue = function () {
      return _this.state.value || {};
    };

    _this.onChange = function (fieldName, fieldValue) {
      var value = (0, _getNewValue2.default)(_this.getValue(), fieldName, fieldValue);
      _this.setState({ value: value });
      _this.props.onChange(value);
    };

    _this.onFormSubmit = function (event) {
      event.preventDefault();
      return _this.submit();
    };

    _this.submit = function () {
      if (!(0, _isFunction2.default)(_this.props.onSubmit)) {
        console.warn('You should pass a onSubmit prop to this form');
        return;
      }
      return _this.props.onSubmit(_this.getValue());
    };

    _this.state = { value: (0, _cloneDeep2.default)(props.state) };
    return _this;
  }

  (0, _createClass3.default)(Form, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (!(0, _isEqual2.default)(prevProps.state, this.props.state)) {
        this.resetState();
      }
    }
  }, {
    key: 'resetState',
    value: function resetState() {
      this.setState({ value: (0, _cloneDeep2.default)(this.props.state) }); // will reset state because state prop has changed
    }
  }, {
    key: 'renderChild',
    value: function renderChild() {
      var domProps = (0, _omit2.default)(this.props, (0, _keys2.default)(Form.propTypes));
      if ((0, _isReactNative2.default)()) {
        return this.props.children;
      }
      if (this.props.useFormTag) {
        return _react2.default.createElement(
          'form',
          (0, _extends3.default)({}, domProps, { ref: 'form', onSubmit: this.onFormSubmit }),
          this.props.children,
          this.props.addSubmitButton ? _react2.default.createElement('button', { type: 'submit', style: { display: 'none' } }) : null
        );
      } else {
        return _react2.default.createElement(
          'div',
          domProps,
          this.props.children
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _Contexts.ParentFieldNameContext.Provider,
        { value: null },
        _react2.default.createElement(
          _Contexts.ErrorMessagesContext.Provider,
          { value: this.props.errorMessages },
          _react2.default.createElement(
            _Contexts.OnChangeContext.Provider,
            { value: this.onChange },
            _react2.default.createElement(
              _Contexts.ValueContext.Provider,
              { value: this.getValue() },
              this.renderChild()
            )
          )
        )
      );
    }
  }]);
  return Form;
}(_react2.default.Component);

Form.propTypes = {
  /**
   * The fields of the form
   */
  children: _propTypes2.default.node,
  /**
   * The object that has the values of the form.
   */
  state: _propTypes2.default.object,
  /**
   * A callback that fires when the form value changes.
   * The argument will be the state with the updated field value.
   */
  onChange: _propTypes2.default.func,
  /**
   * Pass error messages in a object
   */
  errorMessages: _propTypes2.default.object,
  /**
   * Use form tag as a container
   */
  useFormTag: _propTypes2.default.bool,
  /**
   * Adds a button for automatic submitting
   */
  addSubmitButton: _propTypes2.default.bool,
  /**
   * A function that is called when the form is submitted.
   */
  onSubmit: _propTypes2.default.func
};
Form.defaultProps = {
  onChange: function onChange() {},
  errorMessages: null,
  useFormTag: true,
  addSubmitButton: true
};
exports.default = Form;