'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FieldType = require('../FieldType');

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Contexts = require('../Contexts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Field = function (_React$Component) {
  (0, _inherits3.default)(Field, _React$Component);

  function Field() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Field);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Field.__proto__ || Object.getPrototypeOf(Field)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function () {
      if (!_this.input.focus) {
        throw new Error("Field doesn't has a focus method");
      }
      _this.input.focus();
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Field, [{
    key: 'getFieldName',
    value: function getFieldName(parentFieldName) {
      if (parentFieldName) {
        if (this.props.fieldName) {
          return parentFieldName + '.' + this.props.fieldName;
        } else {
          return parentFieldName;
        }
      } else {
        return this.props.fieldName;
      }
    }
  }, {
    key: 'getComponent',
    value: function getComponent() {
      return this.props.type;
    }
  }, {
    key: 'getErrorMessage',
    value: function getErrorMessage(errorMessages, parentFieldName) {
      return this.props.errorMessage || errorMessages[this.getFieldName(parentFieldName)] || (0, _get2.default)(errorMessages, this.getFieldName(parentFieldName));
    }
  }, {
    key: 'getChildProps',
    value: function getChildProps(_ref2) {
      var _this2 = this;

      var value = _ref2.value,
          parentFieldName = _ref2.parentFieldName,
          _onChange = _ref2.onChange,
          errorMessages = _ref2.errorMessages;

      /**
       * This gets the props that are defined in the propTypes of the registered component.
       */
      var fieldComponent = this.getComponent();
      var propOptions = (0, _omit2.default)(this.props, (0, _keys2.default)(Field.propTypes));
      var allowedKeys = (0, _keys2.default)((0, _extends3.default)({}, _FieldType.propTypes, fieldComponent.propTypes));

      /**
       * Options that are not registered in the propTypes are passed also
       * in the passProps object
       */
      allowedKeys.push('type');
      var notDefinedOptions = (0, _omit2.default)(propOptions, allowedKeys);

      var props = (0, _extends3.default)({
        value: (0, _get2.default)(value || {}, this.props.fieldName),
        onChange: function onChange(newValue) {
          return _onChange(_this2.getFieldName(parentFieldName), newValue);
        },
        errorMessage: this.getErrorMessage(errorMessages || {}, parentFieldName),
        fieldName: this.getFieldName(parentFieldName),
        passProps: notDefinedOptions
      }, propOptions);

      return props;
    }
  }, {
    key: 'renderComponent',
    value: function renderComponent(info) {
      var _this3 = this;

      var Component = this.getComponent();
      var props = this.getChildProps(info);
      var ref = Component.prototype.render ? { ref: function ref(input) {
          return _this3.input = input;
        } } : {};
      return _react2.default.createElement(
        _Contexts.ValueContext.Provider,
        { value: props.value },
        _react2.default.createElement(Component, (0, _extends3.default)({}, ref, props))
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      return _react2.default.createElement(
        _Contexts.ValueContext.Consumer,
        null,
        function (value) {
          return _react2.default.createElement(
            _Contexts.ErrorMessagesContext.Consumer,
            null,
            function (errorMessages) {
              return _react2.default.createElement(
                _Contexts.OnChangeContext.Consumer,
                null,
                function (onChange) {
                  return _react2.default.createElement(
                    _Contexts.ParentFieldNameContext.Consumer,
                    null,
                    function (parentFieldName) {
                      return _this4.renderComponent({
                        value: value,
                        parentFieldName: parentFieldName,
                        onChange: onChange,
                        errorMessages: errorMessages
                      });
                    }
                  );
                }
              );
            }
          );
        }
      );
    }
  }]);
  return Field;
}(_react2.default.Component);

Field.propTypes = {
  /**
   * The name of the field in the object.
   */
  fieldName: _propTypes2.default.string.isRequired,

  /**
   * The type of the input. It can be a component
   */
  type: _propTypes2.default.any,

  /**
   * Pass a error message
   */
  errorMessage: _propTypes2.default.string
};
exports.default = Field;