'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _testUtils = require('react-dom/test-utils');

var _testUtils2 = _interopRequireDefault(_testUtils);

var _Form = require('../Form');

var _Form2 = _interopRequireDefault(_Form);

var _Field = require('../Field');

var _Field2 = _interopRequireDefault(_Field);

require('../setupTest');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test('should call focus on child', function () {
  var didCall = false;

  var DummyInput = function (_React$Component) {
    (0, _inherits3.default)(DummyInput, _React$Component);

    function DummyInput() {
      (0, _classCallCheck3.default)(this, DummyInput);
      return (0, _possibleConstructorReturn3.default)(this, (DummyInput.__proto__ || Object.getPrototypeOf(DummyInput)).apply(this, arguments));
    }

    (0, _createClass3.default)(DummyInput, [{
      key: 'focus',
      value: function focus() {
        didCall = true;
      }
    }, {
      key: 'render',
      value: function render() {
        return null;
      }
    }]);
    return DummyInput;
  }(_react2.default.Component);

  var tree = _testUtils2.default.renderIntoDocument(_react2.default.createElement(
    _Form2.default,
    null,
    _react2.default.createElement(_Field2.default, { fieldName: 'name', type: DummyInput })
  ));
  var field = _testUtils2.default.findRenderedComponentWithType(tree, _Field2.default);
  field.focus();
  expect(didCall).toBe(true);
});