{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tvirg\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\my app\\\\src\\\\components\\\\users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { SetCurrentPage, setTotalCount, toggleisFetcing, unfallow } from '../../redux/state/Users-reducer';\nimport { fallow, setuser } from './../../redux/state/Users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Loader from './loader';\nimport { getUsers } from \"./Api\";\n\nclass UsersCont extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = p => {\n      this.props.toggleisFetcing(true);\n      this.props.SetCurrentPage(p);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&cout=${this.props.pageSize}`, {\n        withCredentials: true\n      });\n      getUsers(p, this.props.pageSize).then(response => {\n        this.props.toggleisFetcing(false);\n        this.props.setuser(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleisFetcing(true);\n    getUsers(this.props.curentPage, this.props.pageSize).then(response => {\n      this.props.toggleisFetcing(false);\n      this.props.setuser(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetcing ? /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 37\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      onPageChanged: this.onPageChanged,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      curentPage: this.props.curentPage,\n      unfallow: this.props.unfallow,\n      fallow: this.props.fallow,\n      users: this.props.users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\n;\n\nlet mapStateToProps = state => {\n  return {\n    users: state.UsersData.users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    curentPage: state.UsersData.curentPage,\n    isFetcing: state.UsersData.isFetcing\n  };\n};\n/*let mapDispatchToProps = (dispatch) => {\n    return {\n        fallow: (userID) => {\n            dispatch(fallowAC(userID));\n        },\n        unfallow: (userID) => {\n            dispatch(unfallowAC(userID));\n        },\n        setuser: (users) => {\n            dispatch(set_user(users));\n        },\n        setTotalCount:(TotalCount) =>{\n            dispatch(set_TotalCountAC(TotalCount));\n        },\n        SetCurrentPage: (p) =>{\n            dispatch(set_curentPageAC(p));\n        },\n        toggleisFetcing: (isFetcing) =>{\n            dispatch(setisFetcingAC(isFetcing));\n        }\n    }\n};*/\n\n\nexport default connect(mapStateToProps, {\n  fallow,\n  unfallow,\n  setuser,\n  setTotalCount,\n  SetCurrentPage,\n  toggleisFetcing\n})(UsersCont);","map":{"version":3,"sources":["C:/Users/tvirg/OneDrive/Рабочий стол/my app/src/components/users/UsersContainer.jsx"],"names":["React","connect","SetCurrentPage","setTotalCount","toggleisFetcing","unfallow","fallow","setuser","axios","Users","Loader","getUsers","UsersCont","Component","onPageChanged","p","props","get","pageSize","withCredentials","then","response","data","items","componentDidMount","curentPage","totalCount","render","isFetcing","totalUsersCount","users","mapStateToProps","state","UsersData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {SetCurrentPage, setTotalCount, toggleisFetcing, unfallow} from '../../redux/state/Users-reducer';\nimport {fallow, setuser} from './../../redux/state/Users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Loader from './loader';\nimport {getUsers} from \"./Api\";\nclass UsersCont extends React.Component{\n    componentDidMount(){\n        this.props.toggleisFetcing(true);\n        getUsers(this.props.curentPage, this.props.pageSize).then(response => {\n            this.props.toggleisFetcing(false);\n            this.props.setuser(response.data.items);\n            this.props.setTotalCount(response.data.totalCount);\n        });\n    }\n    onPageChanged = (p) => {\n        this.props.toggleisFetcing(true);\n        this.props.SetCurrentPage(p);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&cout=${this.props.pageSize}`,\n            {withCredentials: true})\n        getUsers(p, this.props.pageSize)\n            .then(response => {\n                this.props.toggleisFetcing(false);\n                this.props.setuser(response.data.items);\n            });\n    }\n    render() {\n        return <>\n            {this.props.isFetcing ? <Loader/> : null}\n            <Users    onPageChanged={this.onPageChanged}\n                      totalUsersCount = {this.props.totalUsersCount}\n                      pageSize= {this.props.pageSize}\n                      curentPage={ this.props.curentPage}\n                      unfallow= {this.props.unfallow}\n                      fallow = {this.props.fallow}\n                      users={this.props.users}\n        />\n        </>\n    }\n};\nlet mapStateToProps = (state) => {\n    return {\n        users: state.UsersData.users,\n        pageSize: state.UsersData.pageSize,\n        totalUsersCount: state.UsersData.totalUsersCount,\n        curentPage: state.UsersData.curentPage,\n        isFetcing: state.UsersData.isFetcing\n    }\n};\n/*let mapDispatchToProps = (dispatch) => {\n    return {\n        fallow: (userID) => {\n            dispatch(fallowAC(userID));\n        },\n        unfallow: (userID) => {\n            dispatch(unfallowAC(userID));\n        },\n        setuser: (users) => {\n            dispatch(set_user(users));\n        },\n        setTotalCount:(TotalCount) =>{\n            dispatch(set_TotalCountAC(TotalCount));\n        },\n        SetCurrentPage: (p) =>{\n            dispatch(set_curentPageAC(p));\n        },\n        toggleisFetcing: (isFetcing) =>{\n            dispatch(setisFetcingAC(isFetcing));\n        }\n    }\n};*/\nexport default connect(mapStateToProps,\n    {fallow, unfallow, setuser, setTotalCount,\n    SetCurrentPage, toggleisFetcing\n})(UsersCont);\n"]},"metadata":{},"sourceType":"module"}