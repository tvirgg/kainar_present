{"ast":null,"code":"import { UserAPI, UserAPI as API } from \"../../components/users/Api\";\nimport { setProfile } from \"./PostsData-reducer\";\nimport { stopSubmit } from \"redux-form\";\nlet initialstate = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst Auth_reducer = (state = initialstate, action) => {\n  if (action.type === 'Get_user_data') {\n    return { ...state,\n      ...action.payload\n    };\n  } else {\n    return state;\n  }\n};\n\nexport const Setuserdata = (id, email, login, isAuth) => {\n  return {\n    type: 'Get_user_data',\n    payload: {\n      id,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const setrequire = () => async dispatch => {\n  UserAPI.authrequire().then(() => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(Setuserdata(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await API.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setrequire());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await API.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(Setuserdata(null, null, null, false));\n  }\n};\nexport default Auth_reducer;","map":{"version":3,"sources":["C:/Users/tvirg/OneDrive/Рабочий стол/my app/src/redux/state/Auth_reducer.js"],"names":["UserAPI","API","setProfile","stopSubmit","initialstate","id","email","login","isAuth","Auth_reducer","state","action","type","payload","Setuserdata","setrequire","dispatch","authrequire","then","response","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,EAAiBA,OAAO,IAAIC,GAA5B,QAAsC,4BAAtC;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAMA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAiC;AAElD,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAoC;AAClC,WAAM,EACJ,GAAGF,KADC;AAEF,SAAGC,MAAM,CAACE;AAFR,KAAN;AAKC,GANH,MAOO;AACH,WAAOH,KAAP;AACD;AACN,CAZD;;AAcA,OAAO,MAAMI,WAAW,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA6B;AACtD,SAAM;AACFI,IAAAA,IAAI,EAAE,eADJ;AACqBC,IAAAA,OAAO,EAAE;AAACR,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB;AAD9B,GAAN;AAGD,CAJM;AAKP,OAAO,MAAMO,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChDhB,EAAAA,OAAO,CAACiB,WAAR,GAAsBC,IAAtB,CAA2B,MAAM;AACzB,QAAIC,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/B,UAAI;AAAChB,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBY,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAJ,MAAAA,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACH;AACR,GALD;AAMH,CAPM;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC,MAAOP,QAAP,IAAoB;AACtE,MAAIG,QAAQ,GAAG,MAAMlB,GAAG,CAACM,KAAJ,CAAUD,KAAV,EAAiBgB,QAAjB,EAA2BC,UAA3B,CAArB;;AACQ,MAAIJ,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,IAAAA,QAAQ,CAACD,UAAU,EAAX,CAAR;AACH,GAFD,MAEK;AACD,QAAIS,OAAO,GAAGL,QAAQ,CAACC,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCP,QAAQ,CAACC,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAT,IAAAA,QAAQ,CAACb,UAAU,CAAC,OAAD,EAAU;AAACwB,MAAAA,MAAM,EAAEH;AAAT,KAAV,CAAX,CAAR;AACH;AACZ,CARM;AASH,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAOZ,QAAP,IAAoB;AAC5C,MAAIG,QAAQ,GAAG,MAAMlB,GAAG,CAAC2B,MAAJ,EAArB;;AACQ,MAAIT,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,IAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AAEhB,CANU;AAOX,eAAeL,YAAf","sourcesContent":["import {UserAPI, UserAPI as API} from \"../../components/users/Api\";\nimport {setProfile} from \"./PostsData-reducer\";\nimport {stopSubmit} from \"redux-form\";\nlet initialstate = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\nconst Auth_reducer = (state = initialstate, action) =>{\n\n    if (action.type === 'Get_user_data'){\n      return{\n        ...state,\n          ...action.payload\n      }\n      \n      }\n      else {\n        return state;\n      }\n}\n\nexport const Setuserdata = (id, email, login, isAuth) =>{\n  return{\n      type: 'Get_user_data', payload: {id, email, login, isAuth}\n  }\n}\nexport const setrequire = () => async (dispatch) => {\n    UserAPI.authrequire().then(() => {\n            if (response.data.resultCode === 0){\n                let {id, email, login} = response.data.data;\n                dispatch(Setuserdata(id, email, login, true));\n            }\n    });\n}\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await API.login(email, password, rememberMe);\n            if (response.data.resultCode === 0) {\n                dispatch(setrequire())\n            }else{\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                dispatch(stopSubmit(\"login\", {_error: message}));\n            }\n}\n    export const logout = () => async (dispatch) => {\n        let response = await API.logout();\n                if (response.data.resultCode === 0) {\n                    dispatch(Setuserdata(null, null, null, false));\n                }\n\n}\nexport default Auth_reducer;\n"]},"metadata":{},"sourceType":"module"}