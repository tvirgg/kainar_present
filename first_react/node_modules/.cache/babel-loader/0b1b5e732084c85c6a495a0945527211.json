{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tvirg\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\my app\\\\src\\\\components\\\\users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { set_curentPageAC, set_TotalCountAC, unfallowAC } from '../../redux/state/Users-reducer';\nimport { fallowAC, set_user } from './../../redux/state/Users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport loader from '../../img/loading.gif';\n\nclass UsersCont extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = p => {\n      this.props.SetCurrentPage(p);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&cout=${this.props.pageSize}`).then(response => {\n        this.props.setuser(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleisFetcing(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&cout=${this.props.pageSize}`).then(response => {\n      this.props.setuser(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetcing ? /*#__PURE__*/React.createElement(\"img\", {\n      src: loader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 37\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      onPageChanged: this.onPageChanged,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      curentPage: this.props.curentPage,\n      unfallow: this.props.unfallow,\n      fallow: this.props.fallow,\n      users: this.props.users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\n;\n\nlet mapStateToProps = state => {\n  return {\n    users: state.UsersData.users,\n    pageSize: state.UsersData.pageSize,\n    totalUsersCount: state.UsersData.totalUsersCount,\n    curentPage: state.UsersData.curentPage,\n    isFetcing: state.UsersData.isFetcing\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    fallow: userID => {\n      dispatch(fallowAC(userID));\n    },\n    unfallow: userID => {\n      dispatch(unfallowAC(userID));\n    },\n    setuser: users => {\n      dispatch(set_user(users));\n    },\n    setTotalCount: TotalCount => {\n      dispatch(set_TotalCountAC(TotalCount));\n    },\n    SetCurrentPage: p => {\n      dispatch(set_curentPageAC(p));\n    },\n    toggleisFetcing: isFetcing => {\n      dispatch(setisFetcingAC(isFetcing));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersCont);","map":{"version":3,"sources":["C:/Users/tvirg/OneDrive/Рабочий стол/my app/src/components/users/UsersContainer.jsx"],"names":["React","connect","set_curentPageAC","set_TotalCountAC","unfallowAC","fallowAC","set_user","axios","Users","loader","UsersCont","Component","onPageChanged","p","props","SetCurrentPage","get","pageSize","then","response","setuser","data","items","componentDidMount","toggleisFetcing","currentPage","setTotalCount","totalCount","render","isFetcing","totalUsersCount","curentPage","unfallow","fallow","users","mapStateToProps","state","UsersData","mapDispatchToProps","dispatch","userID","TotalCount","setisFetcingAC"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {set_curentPageAC, set_TotalCountAC, unfallowAC} from '../../redux/state/Users-reducer';\nimport {fallowAC, set_user} from './../../redux/state/Users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport loader from '../../img/loading.gif';\nclass UsersCont extends React.Component{\n    componentDidMount(){\n        this.props.toggleisFetcing(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&cout=${this.props.pageSize}`).then(response => {\n            this.props.setuser(response.data.items);\n            this.props.setTotalCount(response.data.totalCount);\n        });\n    }\n    onPageChanged = (p) => {\n        this.props.SetCurrentPage(p);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&cout=${this.props.pageSize}`)\n            .then(response => {\n                this.props.setuser(response.data.items);\n            });\n    }\n    render() {\n        return <>\n            {this.props.isFetcing ? <img src={loader} /> : null}\n            <Users onPageChanged={this.onPageChanged}\n                      totalUsersCount = {this.props.totalUsersCount}\n                      pageSize= {this.props.pageSize}\n                      curentPage={ this.props.curentPage}\n                      unfallow= {this.props.unfallow}\n                      fallow = {this.props.fallow}\n                      users={this.props.users}\n        />\n        </>\n    }\n};\nlet mapStateToProps = (state) => {\n    return {\n        users: state.UsersData.users,\n        pageSize: state.UsersData.pageSize,\n        totalUsersCount: state.UsersData.totalUsersCount,\n        curentPage: state.UsersData.curentPage,\n        isFetcing: state.UsersData.isFetcing\n    }\n};\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        fallow: (userID) => {\n            dispatch(fallowAC(userID));\n        },\n        unfallow: (userID) => {\n            dispatch(unfallowAC(userID));\n        },\n        setuser: (users) => {\n            dispatch(set_user(users));\n        },\n        setTotalCount:(TotalCount) =>{\n            dispatch(set_TotalCountAC(TotalCount));\n        },\n        SetCurrentPage: (p) =>{\n            dispatch(set_curentPageAC(p));\n        },\n        toggleisFetcing: (isFetcing) =>{\n            dispatch(setisFetcingAC(isFetcing));\n        }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersCont);\n"]},"metadata":{},"sourceType":"module"}